/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergeKLists(ListNode[] lists) {

        if (lists == null || lists.length == 0)
           return null;

        return divide (lists, 0, lists.length - 1);
        
    }
    
    public ListNode divide (ListNode[] lists, int low, int high){

        if (low > high)
             return null;

        if (low == high)
             return lists[low];
  
          int mid = low + (high-low)/2;
          ListNode left = divide(lists, low, mid);
          ListNode right = divide (lists, mid+1, high);

          return mergeTwoLists(left, right);


    }

    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {

        if(list1 == null && list2 == null)
             return null;
        if (list1 == null)
             return list2;

        if (list2 == null)
             return list1;

        if (list1.val < list2.val) {
            list1.next = mergeTwoLists(list1.next, list2);
            return list1;
        }

        else{
            list2.next = mergeTwoLists(list1, list2.next);
            return list2;
        }
        
    }
}

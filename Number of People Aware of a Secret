class Solution {
    public int peopleAwareOfSecret(int n, int delay, int forget) {
        
        
        Deque<int[]> dQueue = new ArrayDeque<>();

        Deque<int[]> fQueue = new ArrayDeque<>();

        dQueue.addLast(new int[]{1,1});
        fQueue.addLast(new int[]{1,1});

        int current = 0, result = 1;

        for(int day=1; day<=n; day++){  
            int mod = (int)1e9+7;
            if(!dQueue.isEmpty() && dQueue.peekFirst()[0]+delay <= day)//1+2 <= 3

                current = (current + dQueue.pollFirst()[1]) % mod ;

           if(!fQueue.isEmpty() && fQueue.peekFirst()[0]+forget <= day){
            
               int no = fQueue.pollFirst()[1];
               
               current = (current - no + mod) % mod;
               result = (result - no + mod) % mod;
           }

           if(current>0){

               dQueue.addLast(new int[]{day,current});
                fQueue.addLast(new int[]{day,current});

                result = (result+current) % mod;
           }

        }
        return result;

    }
}
